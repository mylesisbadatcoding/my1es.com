<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spinning Cube with Three.js</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        let scene, camera, renderer, cube;
        let idleSpinTimer;
        let isInteracting = false;
        let previousMousePosition = { x: 0, y: 0 };

        init();
        animate();

        function init() {
            // Set up the scene, camera, and renderer
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;  // Initial camera position

            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            // Create a cube
            const geometry = new THREE.BoxGeometry();
            const materials = [
                new THREE.MeshBasicMaterial({ color: 0xff0000 }), // red
                new THREE.MeshBasicMaterial({ color: 0x00ff00 }), // green
                new THREE.MeshBasicMaterial({ color: 0x0000ff }), // blue
                new THREE.MeshBasicMaterial({ color: 0xffff00 }), // yellow
                new THREE.MeshBasicMaterial({ color: 0xff00ff }), // magenta
                new THREE.MeshBasicMaterial({ color: 0x00ffff })  // cyan
            ];
            cube = new THREE.Mesh(geometry, materials);
            scene.add(cube);

            // Add event listeners
            document.addEventListener('mousedown', onMouseDown);
            document.addEventListener('mouseup', onMouseUp);
            document.addEventListener('mousemove', onMouseMove);
            window.addEventListener('wheel', onWheel);  // Zoom functionality
            window.addEventListener('resize', onWindowResize);
        }

        function onMouseDown(event) {
            isInteracting = true;  // User is interacting with the cube
            clearTimeout(idleSpinTimer);  // Stop the idle spin timer
            previousMousePosition = { x: event.clientX, y: event.clientY };  // Store the initial mouse position
        }

        function onMouseUp() {
            isInteracting = false;  // User has stopped interacting
            startIdleSpin();  // Start the idle spin timer after releasing the mouse
        }

        function onMouseMove(event) {
            if (isInteracting) {
                // Calculate the change in mouse position
                const deltaMove = {
                    x: event.clientX - previousMousePosition.x,
                    y: event.clientY - previousMousePosition.y
                };

                // Rotate the cube based on mouse movement
                cube.rotation.y += deltaMove.x * 0.01;  // Rotate around Y axis
                cube.rotation.x += deltaMove.y * 0.01;  // Rotate around X axis

                // Update the previous mouse position
                previousMousePosition = { x: event.clientX, y: event.clientY };
            }
        }

        function onWheel(event) {
            // Zoom in/out based on mouse wheel movement
            camera.position.z += event.deltaY * 0.01;  // Adjust zoom sensitivity
            camera.position.z = Math.max(1, camera.position.z);  // Prevent zooming too close
        }

        function startIdleSpin() {
            // Clear any existing timer and set a new timer for 5 seconds
            clearTimeout(idleSpinTimer);
            idleSpinTimer = setTimeout(() => {
                isInteracting = false;  // Mark as not interacting after 5 seconds
            }, 5000);  // 5 seconds
        }

        function animate() {
            requestAnimationFrame(animate);

            // Resume spinning if not interacting and idle timer has expired
            if (!isInteracting) {
                cube.rotation.x += 0.01;  // Rotate the cube around the x-axis
                cube.rotation.y += 0.01;  // Rotate the cube around the y-axis
            }

            renderer.render(scene, camera);  // Render the scene from the perspective of the camera
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;  // Update camera aspect ratio
            camera.updateProjectionMatrix();  // Update projection matrix
            renderer.setSize(window.innerWidth, window.innerHeight);  // Resize the renderer
        }
    </script>
</body>
</html>
